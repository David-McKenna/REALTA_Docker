FROM ubuntu:18.04
SHELL ["/bin/dash", "-c"]

# Install all required packages available from the disto package manager
RUN apt-get update
RUN apt-get install -y software-properties-common apt-utils wget
RUN add-apt-repository -y multiverse

# Handle tzdata dependency asking for input on server location
ARG DEBIAN_FRONTEND=noninteractive
# Install remaining packages; may be excessive after removing some of the install targets.
RUN apt-get update && \
	apt-get install -y --no-install-recommends autoconf autogen automake autotools-dev bison build-essential cmake csh curl cvs doxygen flex g++ g++-multilib gcc gcc-multilib gfortran gfortran git gnupg-agent gsl-bin hwloc libboost-all-dev libblas-dev libbz2-dev libcfitsio-bin libcfitsio-dev libfftw3-3 libfftw3-bin libfftw3-dev libfftw3-single3 libglib2.0-dev libgsl-dev libgslcblas0 libhdf5-dev libhdf5-m* libhdf5-o* libhdf5-s* libicu-dev liblapack-dev libltdl-dev libpcre3 libpcre3-dev libpng-dev libpnglite-dev librdmacm-dev libtool libtool-bin libx11-dev libxml2 libxml2-dev make mlocate nano pgplot5 pkg-config python-dev python-gnuplot python-pip python-setuptools python-sphinx python-wheel python3-dev python3-pip python3-setuptools python3-wheel qt5-default rdma-core rdmacm-utils tcsh unzip valgrind yodl zstd

# Upgrade python components
RUN python -m pip install --upgrade pip numpy setuptools sphinx==1.7.9 wheel
RUN pip3 install --upgrade pip numpy setuptools sphinx==1.7.9 wheel


WORKDIR /home/soft

# Get PSRCAT
RUN wget http://www.atnf.csiro.au/people/pulsar/psrcat/downloads/psrcat_pkg.tar.gz
RUN tar -zxvf ./psrcat_pkg.tar.gz
RUN rm ./psrcat_pkg.tar.gz

# Get Calceph
RUN wget --no-check-certificate https://www.imcce.fr/content/medias/recherche/equipes/asd/calceph/calceph-3.0.0.tar.gz
RUN tar -zxvf ./calceph-3.0.0.tar.gz 
RUN rm ./calceph-3.0.0.tar.gz

# Get Git repos
RUN git clone https://git.code.sf.net/p/psrchive/code psrchive
RUN git clone https://git.code.sf.net/p/psrdada/code psrdada
RUN git clone https://git.code.sf.net/p/tempo/tempo
RUN git clone https://git.code.sf.net/p/dspsr/code dspsr
RUN git clone https://bitbucket.org/psrsoft/tempo2.git
RUN git clone https://github.com/David-McKenna/sigproc
RUN git clone https://github.com/scottransom/presto.git
RUN git clone https://github.com/swig/swig.git
RUN git clone https://github.com/nextgen-astrodata/DAL.git DAL
RUN git clone https://github.com/demorest/psrfits_utils.git
RUN git clone https://github.com/evanocathain/mockHeader.git mockheader
#RUN git clone https://github.com/SixByNine/psrxml.git
# Get subversion repo
#RUN svn checkout https://svn.atnf.csiro.au/difx/libraries/mark5access/trunk/ mark5access

# Setup enviroment variables to access installed software
ENV SOFT /home/soft
ENV PGPLOT_DIR /usr/lib/pgplot5
ENV PSRCAT_FILE $SOFT/psrcat_tar/psrcat.db
ENV TEMPO $SOFT/tempo
ENV TEMPO2 $SOFT/tempo2/T2runtime
ENV PRESTO $SOFT/presto
ENV PATH $PATH:$SOFT/presto/bin:$SOFT/psrcat_tar/:/usr/local/bin
ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/usr/local/include:$SOFT/presto/lib
ENV CPATH /usr/include/hdf5/serial/:$CPATH
ENV LIBRARY_PATH $CUDA_HOME/lib64:/usr/local/lib:$LIBRARY_PATH
ENV LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH
ENV CPPFLAGS "$CFLAGS $CPP_FLAGS"
RUN updatedb; ldconfig


# Clone the REALTA fftw wisdom files as a base (you may want to recompile these for other machines, but l/q will take multiple days to finish.)
# These took ~ 3 days to finish compiling on the REALTA-UCC2 node.
WORKDIR /etc
RUN git clone https://gist.github.com/799d2873605c189d8261f32b81b3c90c.git fftw

# Generate FFTW wisdom (performance profiling of system to optimise fftw, only run for final builds, rebuild per machine, not needed for REALTA nodes)
WORKDIR /etc/fftw
#RUN fftw-wisdom -v -c -o /etc/fftw/wisdom
#RUN fftwf-wisdom -v -c -o /etc/fftw/wisdomf
#RUN fftwl-wisdom -v -c -o /etc/fftw/wisdoml
#RUN fftwq-wisdom -v -c -o /etc/fftw/wisdomq

# Build psrfits_utils
WORKDIR $SOFT/psrfits_utils
RUN sed -i 's/-Werror//' ./configure.ac
RUN ./prepare
RUN ./configure --enable-shared --x-libraries=/usr/lib/x86_64-linux-gnu
RUN make
RUN make install 

# Build PSRCAT
WORKDIR $SOFT/psrcat_tar
RUN ./makeit

# Build outdated version of SWIG
WORKDIR $SOFT/swig
# We require an older version of swig for the system to compile properly
RUN git reset --hard 1c42135
RUN bash ./autogen.sh
RUN ./configure --enable-shared --x-libraries=/usr/lib/x86_64-linux-gnu
RUN make -j $BUILD_CORES
RUN make install
RUN updatedb; ldconfig

# Build Calceph
WORKDIR $SOFT/calceph-3.0.0
RUN ./configure --with-pic --enable-shared --enable-static --enable-thread --enable-fortran 
RUN make -j $BUILD_CORES
RUN make install
RUN updatedb; ldconfig


# Build TEMPO
WORKDIR $SOFT/tempo
RUN echo " 3801692.284   -528984.335      5076957.630    1  ILOFAR              n  IL" >> obsys.dat
RUN ./prepare
RUN ./configure --enable-shared --x-libraries=/usr/lib/x86_64-linux-gnu
RUN make -j $BUILD_CORES
RUN make install
RUN updatedb; ldconfig

# Build TEMPO2
WORKDIR $SOFT/tempo2
RUN echo "IElfr n" >> ./T2runtime/observatory/aliases
RUN printf "# IE613 LOFAR Station\n 3801633.868    -529022.268     5076996.892      IE613LBA            Ielfrlba\n 3801633.868    -529022.268     5076996.892      IE613LBH            Ielfrlbh\n 3801692.284    -528984.335     5076957.630      IE613HBA            Ielfrhba\n 3801692.284    -528984.335     5076957.630      IE613               Ielfr" >> ./T2runtime/observatory/observatories.dat
RUN ./bootstrap
RUN ./configure --with-calceph=/home/soft/calceph-3.0.0 --x-libraries=/usr/lib/x86_64-linux-gnu --prefix=/usr/local
RUN make -j $BUILD_CORES; make plugins -j $BUILD_CORES
RUN make install; make plugins-install
RUN updatedb; ldconfig

# Build PSRDADA
WORKDIR $SOFT/psrdada
RUN ./bootstrap
RUN ./configure --enable-shared --x-libraries=/usr/lib/x86_64-linux-gnu
RUN make -j $BUILD_CORES
RUN make install

# Build the LOFAR DAL backend
WORKDIR $SOFT/DAL/build
RUN cmake ..
RUN make
RUN make install

# PSRCHIVE hates the debian name style for hdf5
WORKDIR /usr/lib/x86_64-linux-gnu
RUN ln -s libhdf5_serial.so libhdf5.so
RUN ln -s libhdf5_serial_hl.so libhdf5_hl.so

# Build PSRCHIVE
WORKDIR $SOFT/psrchive
RUN ./bootstrap
RUN ./configure --enable-shared --x-libraries=/usr/lib/x86_64-linux-gnu; exit 0
RUN ./packages/epsic.csh
RUN ./configure --enable-shared --x-libraries=/usr/lib/x86_64-linux-gnu 
RUN make -j $BUILD_CORES
RUN make install
RUN updatedb; ldconfig

# Analyse FFT libraries for PSRCHIVE/DSPSR accelleration (will take a while, or jsut take the git repo version.)
WORKDIR $SOFT/psrchive/Util/fft
# Workaround sh not containing 'time' anymore
RUN sed -i 's/#!\/bin\/sh/#!\/bin\/bash/' ./fft_bench 
RUN make bench

# Setup PSRCHIVE config
RUN psrchive_config > ~/.psrchive.cfg
RUN sed -i "s/# Predictor::default = polyco/Predictor::default = tempo2/" ~/.psrchive.cfg
RUN sed -i "s/# Predictor::policy = ephem/Predictor::policy = default/" ~/.psrchive.cfg
RUN sed -i "s/# WeightedFrequency::round_to_kHz = 1/WeightedFrequency::round_to_kHz = 0/" ~/.psrchive.cfg


# Build DSPSR
WORKDIR $SOFT/dspsr
#RUN echo "fits lump sigproc dummy dada lofar_dal puma puma2 spigot wapp mwa ska1" > backends.list
RUN echo "fits lump sigproc dummy dada lofar_dal mwa ska1" > backends.list
RUN ./bootstrap
RUN ./configure
RUN make -j $BUILD_CORES
RUN make install
RUN updatedb; ldconfig


# Build SIGPROC
WORKDIR $SOFT/sigproc
RUN ./bootstrap
RUN ./configure
RUN make -j $BUILD_CORES
RUN make install
RUN updatedb; ldconfig

# Build PRESTO
# PRESTO wisdom seems to just be the fftwf wisdom, so copy it instead
RUN cp /etc/fftw/wisdomf $SOFT/presto/lib/fftw_wisdom.txt

WORKDIR $SOFT/presto/src
RUN make -j $BUILD_CORES
# Generate the wisdom files if needed; will take a few hours. 
#RUN make makewisdom



# Download the REALTA wisdom file, left as a backup
#WORKDIR $SOFT/presto/lib
#RUN wget https://gist.githubusercontent.com/David-McKenna/431ca5fa769c2a923415b286e498a840/raw/914a493cdbc7adfc6950cbc89908643419cd9491/fftw_wisdom.txt

# Install PRESTO python libraries
WORKDIR $SOFT/presto
RUN python -m pip install .
RUN pip3 install .
RUN python tests/test_presto_python.py; exit 0
RUN python3 tests/test_presto_python.py; exit 0

# Build and install mockHeader
WORKDIR $SOFT/mockheader
RUN make
RUN cp ./mockHeader /usr/local/bin/

WORKDIR /home/user
ENTRYPOINT /bin/bash
