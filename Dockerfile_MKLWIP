FROM nvidia/cuda:10.2-cudnn7-devel
SHELL ["/bin/dash", "-c"]

# Install all required packages available from the disto package manager
RUN apt-get update
RUN apt-get install -y software-properties-common apt-utils wget
RUN add-apt-repository -y multiverse

# Install Intel libraries
RUN wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
RUN apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
RUN rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
RUN add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
RUN apt-get update && apt-get install -y --no-install-recommends  intel-oneapi-ipp intel-oneapi-mkl intel-oneapi-python

# Apply all enviroment variables expected for the intel-* suite, acquired by pausing the build and running /opt/intel/inteloneapi/setvars.sh && env
ENV CONDA_EXE /opt/intel/inteloneapi/intelpython/latest/bin/conda
ENV IPPROOT /opt/intel/inteloneapi/ipp/latest
ENV CONDA_PREFIX /opt/intel/inteloneapi/intelpython/latest
ENV FI_PROVIDER_PATH /opt/intel/inteloneapi/mpi/2021.1-beta04//libfabric/lib/prov
ENV _CE_M ''
ENV CLASSPATH /opt/intel/inteloneapi/mpi/2021.1-beta04//lib/mpi.jar:/opt/intel/inteloneapi/daal/latest/lib/daal.jar
ENV CONDA_PYTHON_EXE /opt/intel/inteloneapi/intelpython/latest/bin/python
ENV CPATH /opt/intel/inteloneapi/tbb/2021.1-beta04/env/../include:/opt/intel/inteloneapi/mpi/2021.1-beta04//include:/opt/intel/inteloneapi/mkl/2021.1-beta04/include:/opt/intel/inteloneapi/ipp/latest/include:/opt/intel/inteloneapi/daal/latest/include
ENV _CE_CONDA ''
ENV NLSPATH /opt/intel/inteloneapi/mkl/2021.1-beta04/lib/intel64/locale/%l_%t/%N
ENV LIBRARY_PATH /opt/intel/inteloneapi/tbb/2021.1-beta04/env/../lib/intel64/gcc4.8:/opt/intel/inteloneapi/mpi/2021.1-beta04//libfabric/lib:/opt/intel/inteloneapi/mpi/2021.1-beta04//lib/release:/opt/intel/inteloneapi/mpi/2021.1-beta04//lib:/opt/intel/inteloneapi/mkl/2021.1-beta04/lib/intel64:/opt/intel/inteloneapi/ipp/latest/lib/intel64:/opt/intel/inteloneapi/ipp/latest/../../compiler/latest/linux/compiler/lib/intel64:/opt/intel/inteloneapi/ipp/latest/../../tbb/latest/lib/intel64/gcc4.8:/opt/intel/inteloneapi/daal/latest/lib/intel64
ENV SETVARS_COMPLETED 1
ENV IPP_TARGET_ARCH intel64
ENV DAALROOT /opt/intel/inteloneapi/daal/latest
ENV CONDA_PROMPT_MODIFIER (base) 
ENV MANPATH /opt/intel/inteloneapi/mpi/2021.1-beta04/man:
ENV DPCPP_ROOT /opt/intel/inteloneapi
ENV ONEAPI_ROOT /opt/intel/inteloneapi
ENV MKLROOT /opt/intel/inteloneapi/mkl/2021.1-beta04
ENV PATH /opt/intel/inteloneapi/mpi/2021.1-beta04//libfabric/bin:/opt/intel/inteloneapi/mpi/2021.1-beta04//bin:/opt/intel/inteloneapi/mkl/2021.1-beta04/bin/intel64:/opt/intel/inteloneapi/intelpython/latest/bin:/opt/intel/inteloneapi/intelpython/latest/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
ENV TBBROOT /opt/intel/inteloneapi/tbb/2021.1-beta04/env/..
ENV PS1 \[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\$ 
ENV PKG_CONFIG_PATH /opt/intel/inteloneapi/mkl/2021.1-beta04/tools/pkgconfig
ENV CONDA_DEFAULT_ENV base
ENV I_MPI_ROOT /opt/intel/inteloneapi/mpi/2021.1-beta04


RUN echo "source /opt/intel/inteloneapi/setvars.sh" > /root/.bashrc

# Upgrade/install python components
# LOFAR DAL requires sphinx < 1.8
RUN pip install --upgrade pip setuptools sphinx==1.7.9 wheel

# Handle tzdata dependency asking for input on server location
ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
	apt-get install -y --no-install-recommends autoconf autogen automake autotools-dev bison build-essential cmake csh curl cvs doxygen flex g++ g++-multilib gcc gcc-multilib gfortran gfortran git gnupg-agent gsl-bin hwloc libboost-all-dev libblas-dev libbz2-dev libcfitsio-bin libcfitsio-dev libfftw3-3 libfftw3-bin libfftw3-dev libfftw3-single3 libglib2.0-dev libgsl-dev libgslcblas0 libhdf5-dev libhdf5-m* libhdf5-o* libhdf5-s* libicu-dev liblapack-dev libltdl-dev libpcre3 libpcre3-dev libpng-dev libpnglite-dev librdmacm-dev libtool libtool-bin libx11-dev libxml2 libxml2-dev make mlocate nano pgplot5 pkg-config python-dev python-pip python3-dev qt5-default rdma-core rdmacm-utils tcsh unzip valgrind yodl

RUN python2.7 -m pip install --upgrade pip numpy setuptools sphinx==1.7.9 wheel

WORKDIR /home/soft

# Get PSRCAT
RUN wget http://www.atnf.csiro.au/people/pulsar/psrcat/downloads/psrcat_pkg.tar.gz
RUN tar -zxvf ./psrcat_pkg.tar.gz
RUN rm ./psrcat_pkg.tar.gz

# Get Calceph
RUN wget --no-check-certificate https://www.imcce.fr/content/medias/recherche/equipes/asd/calceph/calceph-3.0.0.tar.gz
RUN tar -zxvf ./calceph-3.0.0.tar.gz 
RUN rm ./calceph-3.0.0.tar.gz

# Get Git repos
RUN git clone https://git.code.sf.net/p/psrchive/code psrchive
RUN git clone https://git.code.sf.net/p/psrdada/code psrdada
RUN git clone https://git.code.sf.net/p/tempo/tempo
RUN git clone https://git.code.sf.net/p/dspsr/code dspsr
RUN git clone https://git.code.sf.net/p/heimdall-astro/code heimdall
RUN git clone https://bitbucket.org/psrsoft/tempo2.git
RUN git clone https://github.com/ajameson/dedisp.git
RUN git clone https://github.com/David-McKenna/sigproc
RUN git clone https://github.com/scottransom/presto.git
RUN git clone https://github.com/swig/swig.git
RUN git clone https://github.com/nextgen-astrodata/DAL.git DAL
RUN git clone https://github.com/cbassa/cdmt.git
RUN git clone https://github.com/NVlabs/cub.git
RUN git clone https://github.com/demorest/psrfits_utils.git
RUN git clone https://github.com/GPU-correlators/xGPU.git xgpu
RUN git clone https://github.com/NVIDIA/cuda-samples.git


# Setup enviroment variables to access installed software
# lstdc++ included in c compiles to workaround a bug in PSRDADA's CUDA compile
ENV SOFT /home/soft
ENV PGPLOT_DIR /usr/lib/pgplot5
ENV PSRCAT_FILE $SOFT/psrcat_tar/psrcat.db
ENV TEMPO $SOFT/tempo
ENV TEMPO2 $SOFT/tempo2
ENV PRESTO $SOFT/presto
ENV PATH $PATH:$SOFT/presto/bin:$SOFT/psrcat_tar/:/usr/local/bin
ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/usr/local/include:$SOFT/presto/lib
ENV CPATH /usr/include/hdf5/serial/:$CPATH
ENV CUDA_HOME /usr/local/cuda
ENV CUDA_TOOLKIT_ROOT_DIR $CUDA_HOME
ENV LIBRARY_PATH $CUDA_HOME/lib64:/usr/local/lib:$LIBRARY_PATH
ENV LD_LIBRARY_PATH $CUDA_HOME/lib64:/usr/local/lib:$LD_LIBRARY_PATH
ENV CFLAGS "-I$CUDA_HOME/include $CFLAGS -lstdc++"
ENV CPPFLAGS "$CFLAGS $CPP_FLAGS"
ENV CUDA_CFLAGS "-I$CUDA_HOME/include $CUDA_CFLAGS -lstdc++"
ENV CUDA_LIBS "-L$CUDA_HOME/lib64 -lcudart $CUDA_LIBS -lstdc++"
RUN updatedb;ldconfig


# Clone the REALTA fftw wisdom files as a base (you may want to recompile these for other machines, but l/q will take multiple days to finish.)
WORKDIR /etc
RUN git clone https://gist.github.com/799d2873605c189d8261f32b81b3c90c.git fftw

# Generate FFTW wisdom (performance profiling of system to optimise fftw, only run for final builds, rebuild per machine)
WORKDIR /etc/fftw
#RUN fftw-wisdom -v -c -o /etc/fftw/wisdom
#RUN fftwf-wisdom -v -c -o /etc/fftw/wisdomf
#RUN fftwl-wisdom -v -c -o /etc/fftw/wisdoml
#RUN fftwq-wisdom -v -c -o /etc/fftw/wisdomq


# Move CUB into the inclides folder
WORKDIR $SOFT/cub
RUN cp -r ./cub /usr/local/include/
RUN updatedb;ldconfig

# Build psrfits_utils
WORKDIR $SOFT/psrfits_utils
RUN sed -i 's/-Werror//' ./configure.ac
RUN ./prepare
RUN ./configure
RUN make
RUN make install 

# Build PSRCAT
WORKDIR $SOFT/psrcat_tar
RUN ./makeit

# Build XGPU (GPU Correlator)
WORKDIR $SOFT/xgpu/src
RUN make CUDA_ARCH=sm_70 NSTATION=196 -j 48
RUN make install

# Build outdated version of SWIG
WORKDIR $SOFT/swig
# We require an older version of swig for the system to compile properly
RUN git reset --hard 1c42135
RUN bash ./autogen.sh
RUN ./configure
RUN make -j 48
RUN make install
RUN updatedb; ldconfig

# Build Calceph
WORKDIR $SOFT/calceph-3.0.0
RUN ./configure --with-pic --enable-shared --enable-static --enable-thread --enable-fortran 
RUN make -j 48
RUN make install
RUN updatedb; ldconfig


# Build TEMPO
WORKDIR $SOFT/tempo
RUN echo " 3801692.284   -528984.335      5076957.630    1  ILOFAR              n  IL" >> obsys.dat
RUN ./prepare
RUN ./configure --enable-shared --x-libraries=/usr/lib/x86_64-linux-gnu
RUN make -j 48
RUN make install
RUN updatedb; ldconfig

# Build TEMPO2
WORKDIR $SOFT/tempo2
RUN echo "IElfr n" >> ./T2runtime/observatory/aliases
RUN printf "# IE613 LOFAR Station\n 3801633.868    -529022.268     5076996.892      IE613LBA            Ielfrlba\n 3801633.868    -529022.268     5076996.892      IE613LBH            Ielfrlbh\n 3801692.284    -528984.335     5076957.630      IE613HBA            Ielfrhba\n 3801692.284    -528984.335     5076957.630      IE613               Ielfr" >> ./T2runtime/observatory/observatories.dat
RUN ./bootstrap
RUN ./configure --with-calceph=/home/soft/calceph-3.0.0 --x-libraries=/usr/lib/x86_64-linux-gnu --prefix=/usr/local
RUN make -j 48; make plugins -j 48
RUN make install; make plugins-install
RUN updatedb; ldconfig

# Build PSRDADA
WORKDIR $SOFT/psrdada
ENV FLAGS "-lstdc++"
RUN ./bootstrap
RUN ./configure --enable-shared --x-libraries=/usr/lib/x86_64-linux-gnu
RUN make -j 48
RUN make install
ENV FLAGS ""

# Build the LOFAR DAL backend
WORKDIR $SOFT/DAL/build
RUN cmake ..
RUN make
RUN make install

# PSRCHIVE hates the debian name style for hdf5
WORKDIR /usr/lib/x86_64-linux-gnu
RUN ln -s libhdf5_serial.so libhdf5.so
RUN ln -s libhdf5_serial_hl.so libhdf5_hl.so

# Build PSRCHIVE
WORKDIR $SOFT/psrchive
RUN ./bootstrap
RUN ./configure --enable-shared --x-libraries=/usr/lib/x86_64-linux-gnu; exit 0
RUN ./packages/epsic.csh
RUN ./configure --enable-shared --x-libraries=/usr/lib/x86_64-linux-gnu 
RUN make -j 48
RUN make install
RUN updatedb; ldconfig

# Build Dedisp
WORKDIR $SOFT/dedisp
RUN sed -i 's/sm_30/sm_70/' ./Makefile.inc
RUN sed -i 's/$(HOME)\/linux_64/\/usr\/local/' ./Makefile.inc
RUN make -j 48
RUN make install

# Build DSPSR
WORKDIR $SOFT/dspsr
#RUN echo "fits lump sigproc dummy dada lofar_dal puma puma2 spigot wapp mwa ska1" > backends.list
RUN echo "fits lump sigproc dummy dada lofar_dal mwa ska1" > backends.list
RUN ./bootstrap
RUN ./configure
RUN make -j 48
RUN make install
RUN updatedb; ldconfig


# Build Heimdall
WORKDIR $SOFT/heimdall
RUN ./bootstrap
RUN ./configure
RUN make -j 48
RUN make install

# Build SIGPROC
WORKDIR $SOFT/sigproc
RUN ./bootstrap
RUN ./configure
RUN make -j 48
RUN make install
RUN updatedb; ldconfig

# Build PRESTO
WORKDIR $SOFT/presto/src
RUN make -j 48
RUN make makewisdom

# Install PRESTO python libraries
WORKDIR $SOFT/presto
RUN python -m pip install .
RUN pip3 install .
RUN python tests/test_presto_python.py; exit 0
RUN python3 tests/test_presto_python.py; exit 0

# Test out CDMT at some point
WORKDIR $SOFT/cdmt
RUN sed -i 's/\/opt\/cuda/\/usr\/local\/cuda/' ./makefile
RUN sed -i 's/$(CUDAPATH)\/samples\/common\/inc/$(SOFT)\/cuda-samples\/Common/' ./makefile
RUN make


WORKDIR /home/user
ENTRYPOINT /bin/dash
